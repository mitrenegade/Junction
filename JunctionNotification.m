//
//  JunctionNotification.m
//  Junction
//
//  Created by Bobby Ren on 12/28/12.
//
//

#import "JunctionNotification.h"
#import "UserInfo.h"

#define CLASSNAME @"Notification"

@implementation JunctionNotification

@synthesize className, senderPfUserID;
@synthesize type;
@synthesize pfUserID, pfUser, pfObject;

-(id)init {
    self = [super init];
    [self setClassName:CLASSNAME];
    // if we init a userInfo, it must have a new/empty pfObject
    // userInfo objects created from Parse are generated by initWithPFObject which uses fromPFObject
    PFObject *newPFObject = [[PFObject alloc] initWithClassName:CLASSNAME];
    [self setPfObject:newPFObject];
    return self;
}

- (id)initWithPFObject:(PFObject *)object {
    self = [super init];
    if (self)
    {
        [self fromPFObject:object];
    }
    return self;
}

-(PFObject*)pfObject {
    // returns current object
    if (pfObject)
        return pfObject;
    else {
        // do not allocate; returning nil should indicate need to find object
        return nil;
    }
    return pfObject;
}

-(PFObject*)toPFObject {
    // for a pulse we only need to save the pfUser and the location
    // returns current pfObject but with updated coordinate and user
    @try {
        [self.pfObject setObject:pfUser forKey:@"pfUser"];
        [self.pfObject setObject:pfUserID forKey:@"pfUserID"];
        [self.pfObject setObject:senderPfUserID forKey:@"senderPfUserID"];
        [self.pfObject setObject:type forKey:@"type"];
    }
    @catch (NSException *exception) {
        NSLog(@"Caught exception in trying to convert UserPulse to PFObject!");
        return nil;
    }
    return self.pfObject;
}

- (id)fromPFObject:(PFObject *)pObject {
    [self setPfObject:pObject];
    [self setClassName:pObject.className];
    [self setPfUser:[pObject objectForKey:@"pfUser"]];
    [self setPfUserID:[pObject objectForKey:@"pfUserID"]];
    [self setSenderPfUserID:[pObject objectForKey:@"senderPfUserID"]];
    [self setType:[pObject objectForKey:@"type"]];
    return self;
}

+(void)FindNotificationsForUser:(UserInfo*)userInfo withBlock:(void (^)(NSArray * results, NSError * error))queryCompletedWithResults{
    PFCachePolicy policy = kPFCachePolicyNetworkOnly;
    PFQuery * query = [PFQuery queryWithClassName:CLASSNAME];
    [query setCachePolicy:policy];
    
    if (!userInfo.pfUserID) {
        NSLog(@"No pfUserID! Cannot find notifications for a non-Parse user");
        queryCompletedWithResults(nil, nil);
    };
    
    NSString * pfUserID = userInfo.pfUserID;
    NSLog(@"FindUserPulse using pfUserID %@", pfUserID);
    // add user constraint
    [query whereKey:@"pfUserID" equalTo:pfUserID];

    [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
        if (error) {
            NSLog(@"FindUserInfoFromParse: Query resulted in error!");
            queryCompletedWithResults(nil, error);
        }
        else {
            if ([objects count] == 0) {
                NSLog(@"FindUserInfoFromParse: 0 results");
                queryCompletedWithResults(nil, nil);
            }
            else {
                queryCompletedWithResults(objects, error);
            }
        }
    }];
    
}
@end
